Introduction
Chapter 1: How Block Bindings Work
  bindings / variable:
    "name" bound to "value" inside "scope"
  
  var Declarations and Hoisting
    
  Block-Level Declarations
    let Declarations
    No Redeclaration
    const Declarations
    The Temporal Dead Zone
  Block Bindings in Loops
    Functions in Loops
    let Declarations in Loops
    const Declarations in Loops
  Global Block Bindings
  Emerging Best Practices for Block Bindings

  Summary
    let and const block bindings are lexical scoping:
      - no hoisted
      - exist ONLY within block where they are declared
    Block bindings: 
      - variables declared exactly where they are needed
      - No access to variable before declaration - doing so cause error (b/c binding before declaration)
    Inside for-in for-of loop:
      - let and const create new binding for with each new iteration
      - (Thus) functions created inside loop body can access loop bindings' current values 
        rather than their values after loop's final iteration
      - same for let in For loop
    const declaration in for loop may result in an error
    Current best practice: immutability prevent certain error
      use const by default
      use let only when the variable is expected to change

Chapter 2: Strings and Regular Expression
Chapter 3: Functions in ECMAScript 6
Chapter 4: Expanded Object Functionality
Chapter 5: Destructuring for Easier Data Access
Chapter 6: Symbols and Symbol Properties
Chapter 7: Sets and Maps
Chapter 8: Iterators and Generators
Chapter 9: Introducing JavaScript Classes
Chapter 10: Improved Array Capabilities
Chapter 11: Promises and Asynchronous Programming
Chapter 12: Proxies and the Reflection API
Chapter 13: Encapsulating Code with Modules
Appendix A: Smaller ECMAScript 6 Changes
Appendix B: Understanding ECMAScript 7 (2016)
