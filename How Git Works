How Git Works

Module 01: Git Is Not What You Think
Introduction
  How does Git internals work?
  Porcelain commands:
     git add
     git commit
     git push
     git pull
     git branch
     git checkout
     git merge
     git rebase
     ...
  Plumbling Commands - the basic building blocks:
    git cat-file
    git hash-object
    git count-objects
    ...
  To master Git, don't worry about learning the commands 
    - Learn The Model
    - Then comes deeper understanding of commands 

Git Is an Onion - layered
  Wikipedia: Git is a Distributed Revision Control System
  ... a simpler way to see Git - a Revision Control System
  ... a even simpler way to see Git - a Stupid Content Tracker for contensts, file and directories 
  ... at its core, Git is a Persistent Map that maps keys to values
  Following will deal with the layers from inside out
  
Meet SHA1
  At the core Git is a Map 
    - a table with keys and values
    values: any sequence of bytes, like text file or binary file
    Given a value, Git can calculate a key for it, a hash
    SHA1 is the algorithm for the calculation
    Every content has its own unique string SHA1 value
    SHA1s are 20 bytes in hexadecimal format (20 X 2 ^8) -> 40 hex digits
    These values will be the keys to store content in map
  
  Every object in Git has its own SHA1 
    so do directories and commits 
  
  What happen when SHA1 collide? Data over-write can happen, but unlikely 
    SHA1s are unique in the universe
  
Storing Things
  Git as "persistent" map:
  To make a content persistent, add "-w" to following command under Git Bash
    > echo "Apple Pie" | git hash-object --stdin -w 
  
  However, since there is no repository specified, the content cannot be saved
    thus following is displayed on console: 
    fatal: Not a git repository (or any of the parent directories): .git
  
  To create a repository, use a high level procelain command: git init
    > git init
    Initialized empty Git repository in {current working directory}/.git/
  This command creates a new hidden subdirectory called .git 

  With a repo ready, re-execute following command 
    > echo "Apple Pie" | git hash-object --stdin -w 
    23991897e13e47ed0adb91a0082c31c82fe0cbe5
  Content is now saved without issue 
  
  Inside the hidden folder .git, there is a directory named "objects"
  This is "object database" - stores objects that represents content 
  Inside "objects" directory, a directory "23" 
    "23" is the first two hexadecimal digits of the SHA1 of the fist saved content ("23"991897e13e47ed0adb91a0082c31c82fe0cbe5)    
    Inside folder 23 is a file named with the remaining digits of the SHA1 (23"991897e13e47ed0adb91a0082c31c82fe0cbe5")    
    - 991897e13e47ed0adb91a0082c31c82fe0cbe5
    This scheme prevents one single huge cluttered directory 

    The file is a "blob" of data 
      blob is a generic piece of content 
    
    However, the original content cannot be read directly 
    Git add a small header and compress content to save space

  Another plumbling command can be used to look at the content of blob directly
    > git cat-file
  git cat-file takes SHA1 as argument 
    with option -t 
      $ git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -t
      blob
    Git returns the type of file, "blob"

    with option -p 
      $ git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -p
      Apple Pie
    
    Git returns the readable content of file ("Apple Pie")
  This is the core of Git
  
First Commit!
  Git as "content tracker":
  A sample project:
    menu.txt
    recipe
      README.txt
      apple_pie.txt
  
  execute command at directory root 
    > git init
    Initialized empty Git repository in c:/cookbook/.git/
  
  For a new project, the ".git/objects" folder holds nothing but "info" and "pack" folder

  Execute command "git status" at project root 
    c:\cookbook>git status
    On branch master

    No commits yet

    Untracked files:
      (use "git add <file>..." to include in what will be committed)

            menu.txt
            recipes/

    nothing added to commit but untracked files present (use "git add" to track) 
  
  To commit a file, it needs to be placed in "staging" area via "add" command
    c:\cookbook>git add menu.txt
    c:\cookbook>git add recipes/
  
  Then verify status again
    c:\cookbook>git status
    On branch master

    No commits yet

    Changes to be committed:
      (use "git rm --cached <file>..." to unstage)

            new file:   menu.txt
            new file:   recipes/README.txt
            new file:   recipes/apple_pie.txt
  
  Execute the first commit:
    c:\cookbook>git commit -m "First commit!" 
    [master (root-commit) daac1a7] First commit!
      3 files changed, 3 insertions(+)
      create mode 100644 menu.txt
      create mode 100644 recipes/README.txt
      create mode 100644 recipes/apple_pie.txt

  Verify staging area now has nothing to commit
    c:\cookbook>git status
    On branch master
    nothing to commit, working tree clean  

  To verify existing commits, run "git log"
    c:\cookbook>git log
    commit daac1a720653a95c427071fc251b69a6d0f46ec6 (HEAD -> master)
    Author: Charles Kuo <chao.kuo@gmail.com>
    Date:   Thu Apr 11 18:53:20 2019 -0700

        First commit!  

  Observe that the SHA1 starts with "daac"
  Open .git/objects/
  locate a folder starts with "da" - it stores the content of the first commit 
  
  To view content of the commit directly 
    c:\cookbook>git cat-file -p daac1a720653a95c427071fc251b69a6d0f46ec6
    tree 46624f2d142b3a74e3aac65f691cdfdbb42ce022
    author Charles Kuo <CharlesK@ashn.com> 1555034000 -0700
    committer Charles Kuo <CharlesK@ashn.com> 1555034000 -0700

    First commit!
  
  A commit is but the text displayed above, generated by Git, stored like a blob
  Git generated content's SHA1, then add a small header to the commit 
  The commit is then compressed, stored as a file in object database  

  The commit is made of the following:
    author Charles Kuo <CharlesK@ashn.com>        - the name of the author 
    committer Charles Kuo <CharlesK@ashn.com>     - the name of the committer
    1555034000 -0700                              - the date of commit
    First commit!                                 - the message
    tree 46624f2d142b3a74e3aac65f691cdfdbb42ce022 - the SHA1 of a tree
  
  tree:
    blob is a file stored in Git
    tree is a directory stored in Git, like blob, generated by Git, then hashed and stored in object database 
  
  In object database, locate the folder that starts with "46", with file that holds the remaining of the SHA1
  To view content of the tree directly 
    c:\cookbook>git cat-file -p 46624f2d142b3a74e3aac65f691cdfdbb42ce022
    100644 blob 9eed377bbdeb4aa5d14f8df9cd50fed042f41023    menu.txt
    040000 tree 5458b1e1046e66dd8dbb249fc4ff64ab29ff90a9    recipes

  The extra data before data type (100644, 040000) are for access permission
  To view content of the blob directly 
    c:\cookbook>git cat-file -p 9eed377bbdeb4aa5d14f8df9cd50fed042f41023
    Apple Pie

  Drill deeper into another tree:
    c:\cookbook>git cat-file -p 5458b1e1046e66dd8dbb249fc4ff64ab29ff90a9
    100644 blob 37c0180c056cc7bf91b1046c4990ec5ee71668f2    README.txt
    100644 blob 9eed377bbdeb4aa5d14f8df9cd50fed042f41023    apple_pie.txt
    
    c:\cookbook>git cat-file -p 37c0180c056cc7bf91b1046c4990ec5ee71668f2
    Put your recipes in this directory, one recipe per file.

    Notice "100644 blob 9eed377bbdeb4aa5d14f8df9cd50fed042f41023    apple_pie.txt"
    holds the same SHA1 as menu.txt - because both have exactly same content 
    - Git reuse existing object in onject database

    blob is not exactly a file, it's file name and permission are stored in the tree that points to the blob

    The Object Database
    The commit "daac" points to a tree "4662"
    tree "4662" points to:
      a blob "9eed", menu.txt -  a content "Apple Pie"
      another tree "5458", recipes

      The recipres tress points to 
        a blob with content of README file, AND
        a blob with content of apple_pie.txt - it is the same content as menu.txt, thus same blob is re-used

    In a different repo with the same contents, all the trees an blobs will have the same content here.
    However, the SHA1 of the commit "daac" here will be different b/c
      data committed are different 
      author is different 
      commit date is different 
           
Versioning Made Easy
  1. Edit menu.txt: Add second line "Cheesecake" and save file
  2. Verify git status change with command "git status"
    C:\cookbook>git status
    On branch master
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)
            modified:   menu.txt
    no changes added to commit (use "git add" and/or "git commit -a")
  3. Stage the change with command "git add"
    C:\cookbook>git add menu.txt
  4. Create a new commit 
    C:\cookbook>git commit -m "Add cake"
    [master 7cdce97] Add cake
    1 file changed, 2 insertions(+), 1 deletion(-)
  5. Verify both commits with command "git log"
    C:\cookbook>git log
    commit 7cdce97c601c1aaab8b01d8b2371bae0cab05d3a (HEAD -> master)
    Author: Charles Kuo <CharlesK@ashn.com>
    Date:   Fri Apr 12 19:12:03 2019 -0700

        Add cake

    commit daac1a720653a95c427071fc251b69a6d0f46ec6
    Author: Charles Kuo <CharlesK@ashn.com>
    Date:   Thu Apr 11 18:53:20 2019 -0700
  6. Look into the second (latest) commit
    C:\cookbook>git cat-file -p 7cdce97c601c1aaab8b01d8b2371bae0cab05d3a
    tree 8a913a85d035f9b3f4097087520dec7cfbada5b0
    parent daac1a720653a95c427071fc251b69a6d0f46ec6
    author Charles Kuo <CharlesK@ashn.com> 1555121523 -0700
    committer Charles Kuo <CharlesK@ashn.com> 1555121523 -0700  
  What is different from the initial commit is a "parent" - the first commit ("daac")
  All commits but the 1st one has a parent   
  Also, the tree of second commit is different from the tree from first commit - like a different root

  7. Verify the tree of 2nd commit 
    C:\cookbook>git cat-file -p 8a913a85d035f9b3f4097087520dec7cfbada5b0
    100644 blob b63cba247afc716104ab997704f0973823894907    menu.txt
    040000 tree 5458b1e1046e66dd8dbb249fc4ff64ab29ff90a9    recipes
  
  8. Verify the new content of menu.txt
    C:\cookbook>git cat-file -p b63cba247afc716104ab997704f0973823894907
    Apple Pie
    Cheesecake

  9. Verify the tree (recipes) of the second commit points to the same SHA1 (5458b1e1046e66dd8dbb249fc4ff64ab29ff90a9)
    because the content of recipes was unchanged so there is no need to create new object    

  10. The SHA1 of the root tree of 2nd commit is different because there is content change in menu.txt

  11. Verify total commit count (2 commits, 3 trees, 3 blobs)
      C:\cookbook>git count-objects
      8 objects, 0 kilobytes

One More Thing: Annotated Tags
  tag: label for the current state of object
    there are regular tags and annotated tags
  
  Annotated Tag command:
    git tag -a [tag name] -m "message"
    git tag -a mytag -m "I love cheesecake"
  
  Annotated tag is also object in objects database
    C:\cookbook>git tag -a mytag -m "I love cheesecake"

    C:\cookbook>git tag
    mytag
  
  Look into tag with tag name
    C:\cookbook>git cat-file -p mytag
    object 7cdce97c601c1aaab8b01d8b2371bae0cab05d3a
    type commit
    tag mytag
    tagger Charles Kuo <CharlesK@ashn.com> 1555123053 -0700

    I love cheesecake
  
  This tag points to the second commit ("7cdc")

  Git Objects Database holds 4 types of Objects
  1. Blobs - arbitrary content
  2. Trees - directories
  3. Commits 
  4. Annotated Tags

What Git Really Is
  The leafs are blobs
  Other trees are recursive containing blobs and others trees
  At this level, Git is similar to a file systems, with commits to keep track of different versions 

Module 02: Branches Demystified
  Introduction
    This module will show Git as a Revision Control System with branches and merges
  What Branches Really Are
    Git create branch for user at initial commit 
      Run "git branch" to look at branches  
        c:\cookbook>git branch
        * master
    Verify what is branch at .git directory 
      Git normally place branch under 
        .git\refs directory, and 
        .git\refs\heads sub-directory
          contains a file called "master"
          The content of "master" file can be shown as
            c:\cookbook>type .git\refs\heads\master
            7cdce97c601c1aaab8b01d8b2371bae0cab05d3a
          - this is the SHA1 of the current commit, as seen here

          c:\cookbook>git log
          commit 7cdce97c601c1aaab8b01d8b2371bae0cab05d3a (HEAD -> master, tag: mytag)
          Author: Charles Kuo <CharlesK@ashn.com>
          Date:   Fri Apr 12 19:12:03 2019 -0700

              Add cake

          commit daac1a720653a95c427071fc251b69a6d0f46ec6
          Author: Charles Kuo <CharlesK@ashn.com>
          Date:   Thu Apr 11 18:53:20 2019 -0700

              First commit!
    
    The project so far has two linked commits
    The "master" branch is just a reference points to a commit - hence why branches are in the ".git\refs" folder
    The "master" branch does not have special status, like any other branches
    
    Run "git branch lisa" to create new branch called lisa 
      c:\cookbook>git branch lisa
      c:\cookbook>git branch
        lisa
      * master
    
    "lisa" branch, like "master" is also placed under .git\refs\heads
    "lisa" branch points to the same commit as master by having the same SHA1 as content
      c:\cookbook>type .git\refs\heads\lisa
      7cdce97c601c1aaab8b01d8b2371bae0cab05d3a    

  The Mechanics of the Current Branch
    When run command "git branch", the current branch is marked with '*'
      c:\cookbook>git branch
        lisa
      * master
    
    Under .git folder, HEAD file contains reference to where current branch is:
    In this case, the master brnch 
      c:\cookbook>type .git\HEAD
      ref: refs/heads/master
    
    HEAD is just a reference to a branch 

    Now, make update to recipes/apple_pie.txt by adding following content:
      pre-made pastry
      1/2 cup butter
      3 tablespoons flour
      1 cup sugar
      8 Granny Smith apples 
    
    Verify git status with command "git status"
      c:\cookbook>git status
      On branch master
      Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git checkout -- <file>..." to discard changes in working directory)

              modified:   recipes/apple_pie.txt

      no changes added to commit (use "git add" and/or "git commit -a")
    
    Run command "git add" to stage the changes
      c:\cookbook>git add recipes/apple_pie.txt
    
    Run command "git commit" to commit the staged change to repo
      c:\cookbook>git commit -m "Add recipe"
      [master 8cce64a] Add recipe
      1 file changed, 7 insertions(+), 1 deletion(-)

    Run command "git checkout" to switch working directory to another branch 
      and set HEAD reference to the latest commit of the new branch
      
      c:\cookbook>git checkout lisa
      Switched to branch 'lisa'

      c:\cookbook>type .git\HEAD
      ref: refs/heads/lisa

      At this commit, the content is switched to previous version 
    
    Add lisa's version of addition to apple_pie.txt
      pre-made pastry
      1/2 cup butter
      3 tablespoons flour
      1 cup sugar
      1 tbsp cinnamon
      10 Granny Smith apples 
    
    Stage this change with "git add"
      c:\cookbook>git add recipes/apple_pie.txt
    
    Commit lisa's version with "git commit"
      c:\cookbook>git commit -m "Add Lisa's version of the pie"
      [lisa 983b4fd] Add Lisa's version of the pie
      1 file changed, 8 insertions(+), 1 deletion(-)
    
    Verify that lisa branch now reference lateest commit with "git log"
      c:\cookbook>git log
      commit 983b4fdccafe02b5ee7b028b308a71a3bafc6d8e (HEAD -> lisa)
      Author: Charles Kuo <CharlesK@ashn.com>
      Date:   Thu Apr 18 19:21:31 2019 -0700

          Add Lisa's version of the pie

      commit 7cdce97c601c1aaab8b01d8b2371bae0cab05d3a (tag: mytag)
      Author: Charles Kuo <CharlesK@ashn.com>
      Date:   Fri Apr 12 19:12:03 2019 -0700

          Add cake

      commit daac1a720653a95c427071fc251b69a6d0f46ec6
      Author: Charles Kuo <CharlesK@ashn.com>
      Date:   Thu Apr 11 18:53:20 2019 -0700
    
Let's Merge!
  Switch back to branch 'master'
    Run: "git checkout master"
  Verify which branch HEAD is pointing to 
    Run: "git branch" 
    c:\cookbook>git branch
      lisa
    * master
  Merge content from other branch into current working branch 
    Run: "git merge lisa"
    - this where a CONFLICT will be shown 
  Verify merge conflict details
    Run: "git status"
    - this is where specific file(s) will be highlighted in red for merge conflict
    such as, "both modified:  recipes/apple_pie.txt" 

  Merge conflict needs to be resolved manually
    1. Open the file listed in red with an editor 
    2. The conflict section may looks something like this...
      Apple Pie

      pre-made pastery
      1/2 cup butter
      3 tablespoons flour
      1 cup sugar 
      <<<<<<< HEAD
      8 Granny Smith apples
      =======
      1 tbsp cinnamon 
      10 Granny Smith apples
      >>>>>>> lisa
    3. From HEAD to === is what stored at current branch; below === is from the incoming branch  
    4. Type final edition after merge directly into the file, like this...
      Apple Pie

      pre-made pastery
      1/2 cup butter
      3 tablespoons flour
      1 cup sugar
      1 tbsp cinnamon 
      9 Granny Smith apples
    5. Save in the change in current working directory 
    6. Verify status with "git status" - the unmerged path is still highlighted in red
    7. Run command "git add {path/to/merged_file}", like 
      "git add recipes/apple_pie.txt"
    8. Verify status with "git status" - the unmerged path is NOW highlighted in green - ready to be committed 
    9. Run "git commit"
      Vim editor poped up 
      User is prompted to add / edit the default merge message - but user can just save and quit 
    10. Run "git log" to verify the newest commit 
    11. Look inside the commit with cat-file command: "git cat-file -p {7 digits of SHA1 of the commit}"
      Merge is just another commit - with TWO parents (A commit can have many parents)
 
Time Travel for Developers
  
Merging Without Merging
Losing Your HEAD
Objects and References

Module 03: Rebasing Made Simple
Introduction
What a Rebase Looks Like
An Illusion of Movement
Taking out the Garbage
The Trade-offs of Merges
The Trade-offs of Rebases
Tags in Brief
A Version Control System

Module 04: Distributed Version Control
Introduction
A World of Peers
Local and Remote
The Joy of Pushing
The Chore of Pulling
Rebase Revisited
Getting Social
The Whole Onion