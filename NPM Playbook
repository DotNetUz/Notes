Module 1: Course Overview
  Track dependencies 
  Write Scripts
  Publish module

Module 2: NPM Basics
  Introduction
    https://github.com/joeeames/NPMPlaybookCourse
  What Is a Package?
    Package v. Module
      Module: single JS file with some functionality 
      Package: contains one or more modules inside and package.json (w/ metadata about package)
  Typical NPM Usage: look at others sample or starter project
    To clone project using git:
      1. git clone https://github.com/joeeames/NPMPlaybookCourse
      2. move into the directory (cd NPMPlaybookCourse)
      3. npm install (install dependencies in package.json)
      4. npm start (per scripts section in package.json)
      5. npm test (per scripts section in package.json)

  NPM Help
    npm -h:  list npm commands
    npm {command} -h: specific help with the command 
    npm help {command} - open docs in browser
    npm help-search {search_token}: list all npm docs with the search_token

  NPM Shortcuts
    list of frequent shorthand command: https://docs.npmjs.com/misc/config

  Creating a Package.json
    Two types of projects: 
      1. For Users (Web app...)
      2. 3rd party package for others to consume 
    For Users:
      Create package.json to:
        - Track Dependencies (download & install via NPM)
        - Create scripts
      To create package.json:
      1. npm init: followed by series of questions; hit enter key for default option
        The questions have to do with publishing on GitHub
      2. some dependencies will be added automatically 
      To create package.json w/ all defaults accepted: npm init -y

  Setting Defaults for npm init
    such as: 
      npm set init-author-name 'Charles Kuo'
      npm set init-license 'MIT'
    to check for default setting:
      npm get init-author-name 
    to remove setting:
      npm config delete init-author-name
    npm set / npm get are shorts for npm config set / npm config get
    All the setting s are stored in .npmrc file - located at the root of user directory   
    - like C:\Users\charlesk\.npmrc

  Installing Packages
    npm install {name of package inside registry}
    to save dependencies saved in package.json:
      npm install {name of package inside registry} -S
      or
      npm i {name of package inside registry} -S
    to install package needed ONLY for development, Not production:
      npm i {name of package inside registry} -D

  Listing Installed Packages
    ls node_modules/
    - list packages installed, or
    npm list 
    
    to list dependencies with specified depth (eg. 1 level deep; 0 for packaged installed by myself)
    npm list --depth 1 

    to list all dependencies globally 
    npm list --global true

    to list more details info on dependencies
    npm list --long true

    to list dependencies in JSON
    npm list --json true

    to list dependencies in parseable format without JSON
    npm list --parseable true

    to list only Dev dependencies 
    npm list --dev true

    to list only non-Dev dependencies 
    npm list --prod true

    list can also be shorten as 'ls'

  Installing Global Packages 
    - allows command to be used in command line 
    npm i {package_name} -g
    When package installed globally, the node module is not installed in sub-directory of current directory
    Use list command to see what libraries are installed

  Removing a Package
    to uninstall a package:
      npm uninstall {package_name} 
    to uninstall a package & remove it from dependencies 
      npm uninstall {package_name} --save
    or
      npm rm {package_name}
      npm un {package_name}
      npm r {package_name}
    add -g flag to unstall from global Repo
    
  Installing Specific Versions & Installing Existing Dependencies
    install package without any specification will get the latest version 
    install package of specific version:
      semantic versioning: major_version.minor_version.patch_number
      major_version: No longer backward compitable 
      minor_version: New features 
      patch_number: Bug fix, performance improvement with No change in functionalities 
      eg. get version 1.8.2
        npm i package@1.8.2
      eg. get latest version of 1.8
        npm i package@"1.8.x" 
        npm i package@"1.8"
      eg. get anything pass version 1.1.0 (exclude 1.1.0)
        npm i package@">1.1.0"
      eg. get anything pass version 1.1.0 (include 1.1.0)  
        npm i package@">=1.1.0"
      eg. get anything pass version 1.1.0 (include 1.1.0) but below 1.4.0
        npm i package@">=1.1.0 <1.4.0"
      eg. install latest version of package with --save
        This will edit dependencies in package.json
        "dependencies": {
          "package": "^1.8.3"
        } 
        The '^' ensure at time of install, if package published any newest major version later than 1.8.3,
        which is the latest of 1.x and the newest major version above 1.8.3 will be installed 
        
        To install newest minor version:
          use "package": "~1.8.3" to get latest of version 1.8.x
        
        To install absolutely latest, use 'X' or '*' in package.json
          "dependencies": {
            "package": "x",
            "package2": "*"
          }  

      eg. Install specific version and NOT letting NPM upgrade
      npm i package@1.8.2 --save --save-exact
      in package.json:
        "dependencies": {
          "package": "1.8.2"
        } 
  
  Updating Packages
    npm update
    npm i {package} --save
      update to the latest minor version
    npm update {package} 
      update one dependency at a time
    npm update -g 
      update global dependencies - can be a long process with wide impact   
      alternatively 
      npm update -g {package}
        update one library at a time maybe a safer approcah 
    
Module 3: Advanced NPM
  Installing from a Git Repo using URL
    default: npm install {package}
    npm install {Full URL from github or other locations}

  Installing from a Gist (GitHub Gist)
    1. copy hash from URL (gist.github.com/{user}/{hash})
    2. npm install gist:{hash}
      Note: the Gist must have package.json of its own
      Gist will be marked as extraneous 
    To save the gist into package.json with --save option
      npm install gist:{hash} --save 
    Within package.json, the dependency will be listed as
      "package": "gist:{hash}"
        
  Installing from a Folder (private, non-public-NPM packages)
    npm install ../path/to/folder 
    To save the package into package.json with --save option
      npm install c:\path\to\folder --save 

  The NPM Registry listed all packages published through npm
    go to package directly from url: npm.im/{package}
    
  Searching for Packages
    npm search {package} 
    or go to npmjs.com and use search field on top

  Pruning - to remove packages not listed in package.json
    by default: npm rm {package} to remove package specified in package.json
    else:
      npm prune
        - remove any package not listed in package.json
    Prepare for production deployment:
      npm prune --production 
        - remove all dev dependencies 
      
  The NPM Repo Command
    npm repo {package}
      opens official npm package repo page in browser 
          
  Upgrading NPM
    run with admin privileges:
      run: npm i npm@latest -g

  Using Simple Scripts w/ npm
    Default script:
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    }, ...

    to run test: npm test

    Two main default scripts: test and start script

    start script is to start application, like npm start 

    Create specific script's name for customized behavior 
    eg. 
      npm run {customed_name_of_script}
        
Module 4: Publishing Your Own Package
  Setting up Your NPM User for Publishing
    goto npmjs.com and click sign-up
      after account creation, run command
        npm adduser
      and enter username, password and Email (public info!)
            
  Preparing Your Project for Publishing
    1. Setup project in git
      git init
      git remote add origin {URL_To_Repo} 
    2. Create package.json
      npm init
        Pay attention to every question
    3. git add .
    4. git commit -m "First check-in"
    5. git push
    6. If upstream is not yet to be set up, git push origin master

  Publishing Your Package
    npm publish 
      to post to npm (then shown version number)
    npm info {package}
    npm repo {package}
    To set version, only do this after committed and push change to file:
      git tag {like_1.0.2}
    
    git push --tags
      This can be verified in GitHub under Master branch with "Tags" tab
      Also, marked as release in GitHub

  Publishing an Update
    1. making chnages to code
      - manually change "version" in package.json
      - Or, let npm do it automatically
      
      git add .
      git commit -m "fixed message"
      , then run one of the following 

      npm version patch 
      npm version minor
      npm version major

    2. update the version
      git push --tags
      git push

    3. publish package
      npm publish 

  Releasing an Alpha / Beta Version
  When releasing new feature as beta, in package.json:
    Set "version": "1.1.0-beta.0",
    This is updated from "1.0.3" to "1.1.0-beta.0"
    product is currently in beta and this is the initial version of beta (beta.0)
    later it can be incremented as beta.1 or beta.2 and so on
    this change needs to be added manually 
  In command line:
    git add . 
      add chnages
    git commit -m "beta version with languages"
      commit the chnages
    git tag 1.1.0-beta.0
      give the same version of tag as in package.json
    git push 
      push the chnages
    git push --tags
      push the tags
    npm publish --tag beta
      publish this version and tag it as beta version
  To install beta version:
    npm i {package}@beta
  To verify versions:
    npm info {package}
    will display info that contains something like following:
      'dist-tag': { latest: '1.0.3', beta: '1.1.0-beta.0' },

      

