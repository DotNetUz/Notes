
JavaScript Introduction

Introduction
Kyle's Work
Introduction to Programming
  You don't know JS: up & going
  Source code is not really for computer - multiple source codes can be identical computer instruction
  Source code is for developer to read and understand what the computer is doing
  Avoid unfounded assumptions based on memory - aim for sensible code

  Syntax + Grammer (rules) = how to write JS programs as "statements"

Statements
  Ex. a = b * 2; // In JS, statements ends with semicolon
  2 is a literal value 
  * is the muliplication operator 
  A word without special meaning (keyword) is a variable, an identifier - like a or b
  left side of assignment (=) is computed and assigned to the left hand side

Expressions
  Statements are composed of phrases, known as expressions
  For ex. in a = ((b) * (2));
  a is an expression
  b is an expression
  2 is an expression
  b * 2 is an expression
  a = b * 2 is an assignment expression and a statement 

  a = b * 2 + foo(c * 3);
  ((a) = (((b) * (2)) + ((foo)((c) * (3))));
  adding parentheses can improve readability 
  operation order typically goes from left to right, so b * 2 before foo
  except when it is overridden by operator precedence or associativity  

  In JS, 2, 2.0 are the same value 

Executing a Program
  Turn source code into computer instruction 
  JavaScript engine turn JS source code to the next layer down 
  JavaScript compiles on the fly and run the compiled code immediately - Error caught early on 
  
Practice Coding
  JS has both static error and run-time error
  JS catches syntax error by compiling code first then executing the compiled code
  shift + enter for multiline input on console
  
Input and Output
  alert("Hello World"); // pop-up with Hello World
  alert itself is not part of JS, but part of the browser
  console.log("Hello World"); // another simple way for output

  The "< undefined" that usually at the end of execution:
  console environment takes last statement and evaluate for a value, then show that value

  ex. a = 2; // the result of assignment expression is the value assigned, so 2 is returned 
  ex. var b = 2; // a var staement has no return value so undefined is returned 

  Another way to get input: prompt()
  ex. var age = prompt("What is your age?");
  prompt() returns a string represents what is typed 

2
JavaScript Syntax
Operators
Values and Types
Code Comments
Variables and Blocks
Conditional Statements
Loops
Functions
Scope
Challenge 1
Challenge 1 Solution
ECMAScript 6