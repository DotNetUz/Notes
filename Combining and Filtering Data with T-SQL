Combining and Filtering Data with T-SQL

Module 1: Course Overview

Module 2: Setting up the Environment
  Setting up the Environment 
  Run SQL Server Management Studio as Admin
  Attach mdf files

Module 3: Shaping Data in a Query with SELECT
  Introduction
    Course objective: 
      Combine and filter data for both presentation and data analytics
        include, Data manipulation via SELECT command 
    
    Four primary purpose of SQL Statement (CRUD)
    Create
      INSERT INTO table
    READ 
      SELECT field FROM table
    UPDATE
      UPDATE table SET field
    DELETE 
      DELETE FROM table 

    Data Manipulation Language (DML)
      Concatenation
      CAST() & CONVERT()
      Formatting Data
        - Dates
        - Strings
        - Numbers
      NULL
      Extrapulate information from customer data: 
        How long does it take to get customer's order?
        How many years has an EE worked
      Query Logic Methods:
        Case, WHEN, IF ELSE
      SQL Error handling 

  Anatomy of the Select Statement
    Syntax 
      The rules that state how and in which order, words and symbols are used in a computer language 
    Query
      The question - what is asked?
    Result set
      The answer - the data returned from the query
    
    SELECT query consisted of several elements:

    Formula:
      SELECT expressions (What should be returned)
      FROM tables (Which table or DB the data should be retrived from)
      GROUP BY fields(Necessary for aggregation - such as SUM, COUNT, MIN, MAX) 
      HAVING conditions (Optional filter for aggregation)
      WHERE conditions (Optional filter for Non-aggregation query)
      ORDER BY Asc or Desc (Optional sorting for (multiple) field(s) - Ascending by default )
    
    Example: 
      SELECT * FROM [Northwind].[dbo].[Employees]
      -- Wildcard (*) is used to browse DB initially and returns all fields 

      SELECT FirstName, LastName, Title, birthdate, Hiredate
      FROM Northwind.dbo.Employees 
      -- Return results for the five fields specified 
      -- Full path is specified as "Northwind.dbo.Employees", AKA. "Fully Qualified Namespace", where
      -- "Northwind" is the DB name
      -- "dbo" means table created by database owner (us)
      -- "Employees" is the name of table 
      -- Use "Available Database" dropdown to select DB by default adn reference table without full path 

      SELECT FirstName, 
       LastName, 
       Title, 
       birthdate, 
       Hiredate
      FROM Northwind.dbo.Employees
      WHERE Title = 'Sales Representative'
      ORDER BY LastName Desc;
      -- select "Sales Representatives"
      -- sort result set by LastName in descending order

    APEX SQL Refactor can work in SSMS and Visual Studio

    To execute query: Ctrl + E 

  Concatenation
    Concatenation
      Linking items (fields) together to create single field as string
      "1" + "1" = "11" OR "Red"+ " " + "Ball" = "Red Ball"
    
    Formula:
      SELECT FirstName + '' + LastName AS EmployeeName (alias)
      FROM Employees
      WHERE Title = 'Sales Representative' (optional - filter on)
      ORDER BY BirthDate DESC; (optional - sort by)
    
    Variant(s):
      -- CONCAT() may not be available in older DB 
      
      SELECT CONCAT(FirstName, ' ', LastName) AS EmployeeName 
      FROM Employees
      -- use AS to customize a column name

    
      Combination with other method call and not necessary with DB fields

      SELECT 'Today is ' + CONVERT(varchar, GETDATE(), 1)
      SELECT CONCAT('Today is ', CONVERT(varchar, GETDATE(), 1));

    Why & Usage:
      Better, consistent format for reporting or form letters
      Single Responsibility Principle - easy maintaince - only 1 place to change
      For customized user experience or reporting
        Return concatenated reult as JSON or HTML
      When results is NOT intended for analytics
      Some data types need to be converted into string before concatenation  

  Cast() & Convert()
<<<<<<< HEAD
    Why:
      Alter data type from one to another
      Used in CRUD
      Produce specific data for customized concatenation 
      Convert() is often used for formatting 
      Cast() is often used for stright data type change (for calculation) 
      Working with NULL values
      Joining tables
      Formatting enduser reports
    
    Diff b/t Cast() & Convert():
      CAST():
        ANSI standard
        Support by ALL RDMS
      CONVERT():
        Supported by 
          MS SQL Server
          MySQL
          Oracle
        NOT suported by
          PostgreSQL
          SQLite 
        Additional formatting capability
          
      Best scenarios for Cast() / Convert()
        Use Cast()
          Whenever formatting is NOT used

        Use Convert()
          Only when platform support is available 

    Cast() & Convert() Syntax:
      

    Convert() to format numerical, date and currency values

    Cast() to alter data type to perform calculation

    Error handling with
      TRY_CAST()
      TRY_CONVERT()

    Join tables 
      on fields with different data values
      via Cast() to alter data type

=======
    Why & Usage: 
      Convert one data type to another in CRUD / Concatenation
      Handle NULL values
      Join tables on fields with different data types
      End user report formatting 
      Convert() is OFTEN used for Formatting 
      CAST() is for data type changing (in calculation, etc)

    
      

>>>>>>> f66cb3671b8ea008d237bb4aa341ba4be705ac01
  Formatting and Calculating Dates
  Formatting Using CASE WHEN
  Summary

Module 4: Combining Data From Two or More Tables using JOINS
  Introduction
  Primary and Foreign Keys
  Inner Join
  Left and Right Joins
  Full Join
  Self Join
  Summary

Module 5: Filtering the Results using WHERE
  Introduction
  Analyzing and Validating using WHERE
  Expressions and Comparison Operators
  Nested Select Statements
  Summary

Module 6: Limiting the Results with SQL Functions
  Introduction
  TOP(n) and TOP(n) PERCENT
  Offset and Fetch
  Using Variables to Limit Results
  Summary

Module 7: Using T-SQL Operators
  Introduction
  Difference Between Joins and Set Operators
  Union All and Set Operator Rules
  Union
  Intersect
  Except
  Summary

Module 8: Aggregating Data in a SELECT Query
  Introduction
  Count
  Sum
  Average
  Min and Max
  Aggregate Summary

Module 9: Simplifying Queries with Intermediary Tables
  Introduction
  Common Table Expressions
  Temporary Tables
  Cursors
  Summary

Module 10: Summary
