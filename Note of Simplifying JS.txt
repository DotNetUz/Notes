Code Example: https://github.com/jsmapr1/simplifying-js/
CHapter 01
Tip 01: Signal Unchanging Values with const as default
  const variable cannot be changed but it is NOT immutable
  e.g. items in a const array CAN be changed 
  const variable can be skimed over without tracking 

  Ex. variables/const/const.js
    const taxRate = 0.1;
    const total = 100 + (100 * taxRate);
    // Skip 100 lines of code
    return `Your Order is ${total}`;  // value of total cannot be changed after declaration 
  // vs. 
    var taxRate = 0.1;
    var total = 100 + (100 * taxRate);
    // Skip 100 lines of code 
    return `Your Order is ${total}`; // conditions may alter value of total
  
  Contrasting const and let to address what might change 
  Ex. variables/const/const.js
    const taxRate = 0.1;  // fixed - known-known
    const shipping = 5.00;  // fixed - known-known 
    let total = 100 + (100 * taxRate) + shipping; // value of total is NOT permanent - known-unknown 
    // skip 100 lines of code 
    return  `Your Order is ${total}`;

  Changing value of a const variable is possible with objects, arrays or other collections
  - but it's best to avoid mutations if possible 
  Ex. variables/const/const.js
    const discountable = [];
    // lines skipped
    for (let i = 0; i < cart.length; i++) {
      if(cart[i].discountAvailable) {
        discountable.push(cart[i]);
      }
    }
  
  Same example without mutations
    const discountable = cart.filter(item => item.dscountAvailable);

Tip 02: Reduce Scope Conflicts with let and const
  let is block scope; var is lexically scoped 
  block scope variables: exist only in blocks like if or for block
  let and const cannot be redeclared with the same name
  var can be redeclared with the same name in the same scope
  Decalre different / expressive names to keep detail and intent clear

Tip 03: Isolate information with Block Scoped variables
  let prevents scope conflicts in for loops and other iterations
  variables assigned with var are functionally scoped 
    - they are always referred to the last value assigned w/in a function
  Ex. variables/scope/scope.js
    function addClick(items) {
      for (let i = 0; i < items.length; i++) {
        items[i].onClick = function () {
          return i; // let variable (i) declared inside block are unique per iteration 
        };
      }
      return items;
    }

Tip 04: Convert Variables to Readable Strings w/ Template Literals w/out concatenation 
  Template literal is surrounded by backticks(`) 
  Anything that's not a string is surrounded by curly braces prefixed with $
  Ex. variables/literals/literals.js
    function greet(name) {
      return `Hi, ${name}`;
    }
    greet('Leo'); // "Hi, Leo"

  method call within template literal is also possible
  Ex.
    return `Hi, ${name.toUpperCase()}!`; // "Hi, LEO" 
  
  Another example with URL:
    return `https://${getProvider}/${image}?width=${parseInt(width, 10)}`;

Chapter 02  Manage Data Collection with Arrays
  How data or collections like objects can be converted into arrays    
  include()
  Spread operator (...)

Tip 05: Create Flexible Collections w/ Arrays
  Structures for collection of data: maps, sets, weakmaps, weaksets, objects and arrays
  arrays have method such as sort(), map(), filter() and reduce()

  Ex. arrays/arrays/arrays.js - example of sort and spread operator 
  const​ team = [​'Joe'​, ​'Dyan'​, ​'Bea'​, ​'Theo'​];
  function alphabetizeTeam(team) {
    return [...team].sort();
  }

  Ex. arrays/arrays/arrays.js - example of filter()
    const staff = [{
      name: 'Wesley',
      position: 'musician',
    }, {
      name: 'Davis',
      position: 'engineer'
    }];

    function getMusicians(staff) {
      return staff.filter(m => m.position === 'musician');
    }

    getMusicians(staff); // [{name: "Wesley", position: "musician"}]
  
  To iterate over an object, one needs to get keys from Object.keys() then iterate over those 
  Ex. arrays/arrays/arrays.js - example of Object.keys()
    const game1 = {
      player: 'Jim Jonas',
      hits: 2,
      runs: 1,
      errors: 0
    };

    const game2 = {
      player: 'Jim Jonas',
      hits: 3,
      runs: 0,
      errors: 1
    };

    const total = {};

    const stats = Object.keys(game1);
    for (let i = 0; i < stats.length; i++) {
      const stat = stats[i];
      if(stat !== 'player') {
        total[stat] = game1[stat] + game2[stat];
      }
    }

  total; // { hits: 5, runs: 1, errors: 1}

  Iterable: a way for program to go through a collection one item at a time while tracking current position
  Any action applies to arrays also applies to any data structure with iterable (eg. string)
  OR one that can be transformed into an iterable (like with Object.keys())

  Conceptually an object is a key-value store that can also be an array of arrays - with the inner arrays holding only two items
  Ex. object as key-value store vs. array of arrays
    const dog = {name: 'Don', color: 'black'};  // object
    const dogPair = [
      ['name', 'Don'],
      ['color', 'black']
    ];  // array of arrays

    function getName(dogPair) {
      return dogPair.find(attribute => {
        return attribute[0] === 'name';
      })[1]
    } 

    getName(dogPair); // 'Don'

  Object.entries() - convert object to an array of arrays
  Ex.
    const dog = {name: 'Don', color: 'black'};  // object
    Object.entries(dog)[0]; // ['name', 'Don']

Tip 06 Check Existence in an Array with Includes() (but without checking position)
  Ex. arrays/includes/includes.js
    const sections = ['contact', 'shipping'];
    function displayShipping 















   


  



