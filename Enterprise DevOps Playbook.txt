DevOps
  culture
  principles
  processes
  that automate streamline e2e flow
  from code development
  to delivering features to users in production
  on an ongoing basis

Goal
  At the same time:
    reduce risk
    inclease velocity 
    improve quality 

Players
  SW Dev 
  QA
  Sec
  Ops

ToDo
  - Transform culture
  
  - Change the way to 
    Design & Build SW
    in a Modular approach
  
  - Automate legacy (= existing?) processes

  - Design contracts to enable integration of Dev and Ops

  - Collaborate to leads to more collaboration 

  - Honest performance assessment 

  - Consistent improvement in SW delivery strategies
    based on
    EXP / Feedback / Lesson
    project requirement 

Each Play is a practical roadmap to:
  Define starting point, steps and plan
  to be adapted in different context 

  Play 1 - Develop the Team - culture, principles and roles
    Successful change 
      depends on 
        capabilities of people and culture
    culture drives structure   

  Play 2 - Study DevOps Practices (7)
    Definition, How and What to Measure
    Minimum knowledage of expectation from each Practice
    Questions about definition & scope
    Implementation checklist

  Play 3 - Assess DevOps Maturity Level
    Continuously assess strength and weakness as a team

  Play 4 - Create DevOps Pipeline
    Pipeline 
      - Repeatable end to end implementation of DevOps workflow
      - From code check-in
        to automated test
        to manual review
        to deployment
      - consisted of Activities & Tools
    
  Play 5 - Learn and Improve Through Metrics & Visibility
    You cannot manage what you cannot measure
    - Where you are
    - Where you are going
    - How to get where you want to go
  
PLAY 1 - Develop the Team - culture, principles and roles
  Principle and Culture
    Root causes of issues in DevOps implementation is often traced to one of the principle or culture
    1. Ops as 1st-class citizen
      Operational needs should have equal weight to other backlog items 
    2. Dev as 1st-responder to production issues
      Add code base knowledge in diagnosis team 
      Enforce dev accountability 
    3. Shorten time b/t bug identification to production fix 
      Dev as part of Ops support team to proactively identify potential needs
      Common obstacles of communication & integration
        - separate team w/ separate contracts
        - separate responsibility & manual process
    4. Shorten time b/t code commit to deployment
      Design system architecture to deploy discrete changes 
      so that process automtion is possible 
      to reduce deployment time and improve quality 
    5. Minimize coordination to deploy release
      Instead of formal communication b/t groups, apply following:
      - Ongoing interaction
      - Shared knowledge on every aspect of project
      - Shared automated repeatable processes 
      - Shared responsibility
      Maximize transparency OVER constant forced communication 
    6. STOP & FIX defects identified by continuous flow and monitoring 
      Constant visibility into all programs and systems to 
      monitor, identify and resolve issues 
      before negatively impact user experience 
    7. Enforce STD process to ensure predictable outcomes
      Exception is NOT norm
      Instability breaks automation - which in term breaks DevOps
    8. Become a learning organization through continual feedback and ACTION
      Learning from failure 
      -> institutional memory 
      -> changes in action 
      -> prevent future failure 
  
  New DevOps Role
    Autonomous team independently manage own 
      - work
      - working practices 
      - Build
      - Deploy
      - Operate and maintain SW 

    Anti-pattern: Standalone DevOps Team
    instead, 
    a DevOps engineer OR Enginner with DevOps skills must take on ownership of a feature 

    ROLE: DevOps Architect
      Defination:
        uses automation to create efficient, 
        effective processes and standards to 
        continuously improve quality and estimation.

      RESPONSIBILITIES:
        oversees tool analysis and selection and implements test automation frameworks and approaches

      REQ:
        technical depth necessary to provide advice for 
          making appropriate technology choices
          defending recommendations
          driving technical implementation
          end-to-end test automation and tool strategies
        
      Specific Tech:
        - containerization and orchestration of containers across 
        multiple Infrastructure as a Service (IaaS) vendors 
        - deployment automation using IaaS providers 

    
    ROLE: DevOps Engineer
      Defination:
        hybrid technical role that comprises development and operations, 
      
      RESPONSIBILITIES:
        Implement development and deployment pipeline
        Specifically, 
          developing Infrastructure as Code that enables immutable infrastructure, repeatability, 
          and automation of the entire infrastructure for each environment.
      
      REQ:
        proficient in coding or scripting
        process reengineering
        collaborating with multiple groups

      Specific Tech:
        well-versed in multiple popular and commonly used operating systems and platforms

    ROLE: Test Automation Engineer
      Defination:
         test automation engineer automates as many steps as possible to 
         achieve the test coverage and confidence required to quickly push changes to production
      
      RESPONSIBILITIES:
        The test automation engineer provides the framework and expertise 
        to enable developers to embed test automation as part of the continuous process.

      REQ:
        well-versed in software testing processes and tools 
          - unit testing, mock integration testing, and test automation tools like Selenium
        Scripting needed to implement automated test processes for each DevOps pipeline step  
      
      Specific Tech:
        automations include 
          unit tests 
          static code tests 
          smoke tests 
        Specific tests: 
          Section 508 compliance checks
          SLA validations
          vulnerability scans.

    ROLE: Site Reliability Engineer
      Defination:
        Monitor apps or services POST-deployment
      
      RESPONSIBILITIES:
        Automate as much as possible to 
        establish key thresholds for alert automation to 
        baseline the different health levels for applications and services
      
      REQ / Specific Tech:
        Matrics gathering data across environments with:
          Application Performance Monitoring [APM]
          Security Information & Event Management [SIEM] 
            - collecting security alert in single location to distribute centralized message
            - provide logging users and reporting system changes for policy compliance purpose 
              - PCI, HIPPA and FFIEC
            - automate cross-sources-correlation analysis to pre-filter false positives with
              - Threat Feeds
              - Blacklists
              - Geolocations
        And troubleshooting gathered data  

    ROLE: Software Engineer
      Defination: developers

      REQ / RESPONSIBILITIES:
        embrace principles (in PLAY 1) 
        complete team mindset:
          Dev also covers testing, infrastructure and system admin roles
          - you build it, you run it, you fix it

      Specific Tech: - 

    Other ROLES of similar names include "Release Engineer" or "Ops Lead"  

PLAY 2: Study the DevOps Practices
  
  From code commit to deployment 
    
  PRACTICE 1: Configuration management 
    Defination:
      Configuration management (CM) = 
        source control 
        [+ manage / deploy artifacts] 
        [+ configure SW/HW] 
      to automate and standardize deployment 

      Centralized workflow - 1 branch
        usually used to transition out of traditional source control like Apache Subversion

      Feature workflow

      Gitflow workflow
        Based on Vincent Driessenâ€™s Git Branching model
        
        Master branch
          Offical release history 
          Code merged only before new release
          All historical releases are tagged in master branch
        
        Hotfix branch
          Support maintenance or patch fixes that require quick release into production
          The ONLY branch forks off the master directly 
          After fix is completed, merged back into master, development and/or release branches as needed
          
        Release branch 

        Development branch 

        Feature branch
    
    Guiding Questions:
      1. How do you manage source code versions?
      2. Do you maintain & improve production system OR build new system?
      3. How many feature are being built at the same time?
      4. What happen when you receive a defect from Ops team? 
      5. How do you fix defect and manage source code change?
      6. Who owns source code control system? Dev team, maintenance team, Ops team?
      7. What criteria is used to determine source code branching strategy?
      8. Are you building a monolithic system or microservices-based distributed system?
      9. How many code repo do you have / expect to have?
      10. Are you planning continuous delivery or continuous deployment?   

    Checklist:
      1. Document configuration management approach in a simple, easy-to-read document to everyone 
      2. Select a source code control system that allows all types of branching techniques
         - even some advanced flow may not be used 
      3. Select configuration workflow based on operations need and continuous delivery objectives. 
         (Gitflow is most effective for delivering)
      4. Document branching strategy for easy knowledge sharing
      5. Define limitations of configuration management and source code branching strategy 


  PRACTICE 2: Continuous integration 

  PRACTICE 3: Automated testing 

  PRACTICE 4: Infrastructure as Code

  PRACTICE 5: Continuous delivery 

  PRACTICE 6: Continuous deployment 

  PRACTICE 7: Continuous monitoring 



  

