{Module one: Course Overview}
  class, method and properties
  raise and hadle events
  keep code readable
  error handling
  visual studio features

{Module two: An Introduction to C# and .NET}
Introduction
  Need to install VS
Setup
  VS community
.NET
  .NET framework is part of VS installation
  Application on top of framework can utilize framework's interface for features
  .NET framework contains two main parts:

    1. Common Language Runtime (CLR)
      - execution environment for .NET (C#) application
      - manage app while it executes
      - tear down app after execution or unrecoverable error
      - Other services include:
        memory management:
          tracking memory use during execution
          ensure enough memory during execution
          claen up memory after execution
        free user from hardware details
        support multiple languages: C#, VB, F#, ...etc

    2. Framework Class Library (FCL)
      - user interact on day-to-day basis
      - contain reusable software for building application
        such as:
          regular expression
          reand and write data from DB
      - AKA Base Class Library (BCL): technically a subet of FCL
        works everywhere (used for this course)
      - user typically focus on some area like ASP.NET, but not all

The C# Language
  one of the languages for .NET
  influence from Java, C++ and JavaScript

Hello, World
  - When CLR starts a console app, it will automatically start to
    look for a program class with Main method and start execute code inside
  - C sharp compiler (csc) can be found in following directory
      C:\Windows\Microsoft.NET\Framework\v4.0.30319>
  - Compilation usually done via Visual Studio

The Compiler: csc.exe
  - Compile one or multiple files into single executable or library
  - Transforms C# code into Microsoft Intermediate Language (MSIL), similar to Java bytecode
  - MSIL define instruction for CLR
  - CLR transform MSIL instructions (within EXE) into CPU instructions

Visual Studio
  - access command line argument at Main method with string[] args

Debugging
  - To pass in argument while debugging:
     Right-click on project
     Select "Properties"
     Select "Debug" setting on left panel
     Under "Start Options"
      Within "Command line arguments"
      Enter arguments for string args[] during debugging
      [Content entered will be used for command line argument(s) during debugging]

Are You Sleepy?
  Shift + Ctrl + B: Build
  Start class and method name with upper Cases

Summary
  C# is strongly typed & case sensitive language for .NET
  Visual Studio is an IDE for C# app of all types

{Module three: Classes and Objects}
Introduction
  Relationship b/t classes and objects

The Grade Book
  Use class to create abstraction for different nouns to work with
    - a person, a place, a thin, an idea
  Class Member Define:
    1. State
    2. Behavior (methods)

Classes and Objects
  float is single precision
  double is double precision
  a decimal number is by default a double percision floating point number
    - no implicit conversion from float to double
  To assign value to a float variable, attach f at end of decimal number:
    float d = 91.5f;

Constructors
  Every class has constructor implicitly
  ctor: code snippet for constructor

Classes and Variables
  garbage: object no longer being used
  CLR clean garbage objects up and free up memory periodically

Reference Types
  Wehn define a class, a reference type is created
  Variable does not hold class object,
  it holds pointer to the object in memory,
  which is a memory address

Access Modifiers
  Encapsulation: enclosing or hiding details
    public: can be accessed in the same assembly or another assembly that reference it
    private: can ONLY be accessed from within the same class or struct
    protected: can ONLY be accessed from within the same class or struct, or the derived class
    internal: can only be accessed from within the same assembly
    protected internal: protected OR internal

  A class or struct member without access modifier will be PRIVATE by default
  A class or struct or interface without access modifier will be INTERNAL by default
  A interface member is ALWYAS public
  A delegate (when declared directly within a namespace) access modifier will be INTERNAL by default
  A delegate (when nested) access modifier will be PRIVATE by default

  Derived classes cannot have greater accessinility than their base type

Statics
  Use static members of a class without creating an instance of the class

Statistics
  Reduce complexity of app by adding classes
  Constructor Code snippet: ctor + Tab X 2

Computation
  Console WriteLine Code snippet: cw + Tab X 2

Summary

{Module four: Classes and Objects}
Assemblies
  Assemblies
    - created by compiler
    - contains comipled code that can be executed under the Common Language Runtime
    - .exe or (dynamic-link library) .dll files
    - contain metadata about all types inside

  Global Assembly Cache
    - a central location to store assemblies for a machine
    - contain many core libraries like MSCorLib.dll

Browsing Assemblies
  Assembly name is the same as project name by default
  Output type:
    console application (exe)
    class library (dll)  - cannot be started directly
  Assembly will only be loaded when it is used in program, not referenced
  MsCorLib is not listed under References in Solution Explorer - the usage is implied
  Object Browser: see what classes are available to use

Referencing Assemblies
  - must load assembly into memory before using types inside
  - easy approach - reference the assembly in VS

Unit Testing
  - code to test code
  - same assembly == same project
  - Test Calss needs to be public
  - AVOID to make assertion on floating point numbers:
    There can always be minor imprecision
    Double percision vs. Single percision: amke sure the acutual and expected value are of same type
  - Use the option to specify delta when comparing floating value
    Assert.AreEqual(85.16);



Tests and Access Modifiers

Tests and Floats

Summary


Types

Introduction

Reference Types

Value Types

struct and enum

Passing Parameters

ref and out
mmutability

Arrays

mmary


hods, Fields, Events, and Properties

roduction

thods

Fields and Properties

Events
elegates

Events Revisited

Summary


Control Flow

Introduction

Branching

Switching

Iterating

Jumping

Throwing

Handling

Chaining

Finally

Summary

Object Oriented Programming

Introduction

The Pillars

Inheritance

Polymorphism

Abstract Classes

Interfaces

Common Interfaces

Wheto Go Next

summary
