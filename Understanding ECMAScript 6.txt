Introduction
Chapter 1: How Block Bindings Work
  bindings / variable:
    "name" bound to "value" inside "scope"
  
  var Declarations and Hoisting
    Hoisting: var declaration treated as being at top of function or global scope (when outside of function)
    No hoisting for var initialization 
    
    Ex. var declaration & initialization without showing hoisting
      function getValue(condition) {
        if(condition) {
          var value = "blue"; // declaration & initialization
          return value;
        } else {
          return null;
        }
      }

    Ex. var declaration & initialization showing hoisting - what actually happen
      function getValue(condition) {
        var value;  // declaration
        if (condition) {
          value = blue; // initialization
        } else {
          return null;
        }
      }
    
  Block-Level Declarations
    Block scope / lexical scope: 
      - inside a function
      - inside a {} block
    Block-Level declarations are inaccessible outside block scope
    
    let Declarations
      let declaration syntax is the same as var but only accessible in current block
      Best practice: place let declaration at the begining of block
      Ex.
        function getValue(condition) {
          // if condition: false, value will not be declared or initialized
          if (conditon) {
            let value = "blue"; // No hoisting - only accessible within current {} block
            return value;
          } else {
            return null;
          }
        } 
    
    No Redeclaration
      Same identifier, same scope, declared with let & var = error
      Ex. 
        var count = 30;
        let count = 40; // error - even if let declaration come first

      Same identifier, let declaration within its own {} block = No error
      Ex.
        var count = 30;
        if (condition) {
          let count = 40; // local count "shadows" global count - no error
        }

    const Declarations
      Binding with const:
        - value cannot be changed once set
        - (Thus) must be initialized on declaration
      Ex.
        const x = 30;
        const y; // Uncaught SyntaxError: Missing initializer in const declaration

    const vs. let Declarations
      const declarations are block-level declarations - not accessible outside of scope
      Error: const variable has the same identifier with another var or let variable within the same scope
      const is read-only
      const object's properties can be modified 

    Object declarations with const
      Ex. 
        const person = { name: "Charles" };
        person.name = "Jack";       // No error
        // person = { name: "Jack" };  // SyntaxError: Identifier 'person' has already been declared
      const prevents modification in binding, NOT modifification of bound value
  
    The Temporal Dead Zone (TDZ)
      Variables declared with let or const cannot be accessed until declaration
      within the same scope
      Ex.
        console.log(typeof value);  // undefined - no binding here
        if (true) {
          console.log(typeof value); // ReferenceError: value is not defined
          let value = "red";
        } 
  
  Block Bindings in Loops
    declare counter with let to keep it inaccessible outside of the loop
    Ex.
      for (let i = 0; i < 10; i++) {
        console.log(i);
      }
      console.log(i); // ReferenceError: i is not defined
    
    Functions in Loops
      declare counter with var - all iterations share one copy of the counter 
      Ex.
        var funcs = [];
        for (var i = 0; i < 10; i++) {
          funcs.push(function() {
            console.log(i);
          });
        }
        funcs.forEach(function(func) {
          func(); // "10" x 10
        });
      To keep unique counter value for each iteration, use immediate invoked function expressions (IIEF)
      Ex.
        var func = [];
        for (var i = 0; i < 10; i++) {
          // count i passed to IIFE for every iteration and stored as value
          funcs.push((function(value) {
            return function() {
              console.log(value);
            }
          }(i)));
        }

        funcs.forEach(function(func) {
          func(); // 0 to 9
        });

    let Declarations in Loops
      Ex. use let in for loop
        var funcs = [];
        for (let i = 0; i < 10; i++) {
          funcs.push(function() {
            console.log(i);
          });
        }
        funcs.forEach(function(func) {
          func();
        });

      Ex. use let with for-in loop
        var funcs = [],
            object = {a: true, b: true, c: true};
        for (let key in object) {
          funcs.push(function() {
            console.log(key);
          });
        }
        funcs.forEach(function(func) {
          func(); // a, b, c
        });
        
    const Declarations in Loops
  Global Block Bindings
  Emerging Best Practices for Block Bindings

  Summary
    let and const block bindings are lexical scoping:
      - no hoisted
      - exist ONLY within block where they are declared
    Block bindings: 
      - variables declared exactly where they are needed
      - No access to variable before declaration - doing so cause error (b/c binding before declaration)
    Inside for-in for-of loop:
      - let and const create new binding for with each new iteration
      - (Thus) functions created inside loop body can access loop bindings' current values 
        rather than their values after loop's final iteration
      - same for let in For loop
    const declaration in for loop may result in an error
    Current best practice: immutability prevent certain error
      use const by default
      use let only when the variable is expected to change

Chapter 2: Strings and Regular Expression
Chapter 3: Functions in ECMAScript 6
Chapter 4: Expanded Object Functionality
Chapter 5: Destructuring for Easier Data Access
Chapter 6: Symbols and Symbol Properties
Chapter 7: Sets and Maps
Chapter 8: Iterators and Generators
Chapter 9: Introducing JavaScript Classes
Chapter 10: Improved Array Capabilities
Chapter 11: Promises and Asynchronous Programming
Chapter 12: Proxies and the Reflection API
Chapter 13: Encapsulating Code with Modules
Appendix A: Smaller ECMAScript 6 Changes
Appendix B: Understanding ECMAScript 7 (2016)
