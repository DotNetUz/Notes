{Module one: Course Overview}
  class, method and properties
  raise and hadle events
  keep code readable
  error handling
  visual studio features

{Module two: An Introduction to C# and .NET}
Introduction
  Need to install VS
Setup
  VS community
.NET
  .NET framework is part of VS installation
  Application on top of framework can utilize framework's interface for features
  .NET framework contains two main parts:

    1. Common Language Runtime (CLR)
      - execution environment for .NET (C#) application
      - manage app while it executes
      - tear down app after execution or unrecoverable error
      - Other services include:
        memory management:
          tracking memory use during execution
          ensure enough memory during execution
          claen up memory after execution
        free user from hardware details
        support multiple languages: C#, VB, F#, ...etc

    2. Framework Class Library (FCL)
      - user interact on day-to-day basis
      - contain reusable software for building application
        such as:
          regular expression
          reand and write data from DB
      - AKA Base Class Library (BCL): technically a subet of FCL
        works everywhere (used for this course)
      - user typically focus on some area like ASP.NET, but not all

The C# Language
  one of the languages for .NET
  influence from Java, C++ and JavaScript

Hello, World
  - When CLR starts a console app, it will automatically start to
    look for a program class with Main method and start execute code inside
  - C sharp compiler (csc) can be found in following directory
      C:\Windows\Microsoft.NET\Framework\v4.0.30319>
  - Compilation usually done via Visual Studio

The Compiler: csc.exe
  - Compile one or multiple files into single executable or library
  - Transforms C# code into Microsoft Intermediate Language (MSIL), similar to Java bytecode
  - MSIL define instruction for CLR
  - CLR transform MSIL instructions (within EXE) into CPU instructions

Visual Studio
  - access command line argument at Main method with string[] args

Debugging
  - To pass in argument while debugging:
     Right-click on project
     Select "Properties"
     Select "Debug" setting on left panel
     Under "Start Options"
      Within "Command line arguments"
      Enter arguments for string args[] during debugging
      [Content entered will be used for command line argument(s) during debugging]

Are You Sleepy?
  Shift + Ctrl + B: Build
  Start class and method name with upper Cases

Summary
  C# is strongly typed & case sensitive language for .NET
  Visual Studio is an IDE for C# app of all types

{Module three: Classes and Objects}
Introduction
  Relationship b/t classes and objects

The Grade Book
  Use class to create abstraction for different nouns to work with
    - a person, a place, a thin, an idea
  Class Member Define:
    1. State
    2. Behavior (methods)

Classes and Objects
  float is single precision
  double is double precision
  a decimal number is by default a double percision floating point number
    - no implicit conversion from float to double
  To assign value to a float variable, attach f at end of decimal number:
    float d = 91.5f;

Constructors
  Every class has constructor implicitly
  ctor: code snippet for constructor

Classes and Variables
  garbage: object no longer being used
  CLR clean garbage objects up and free up memory periodically

Reference Types
  Wehn define a class, a reference type is created
  Variable does not hold class object,
  it holds pointer to the object in memory,
  which is a memory address

Access Modifiers
  Encapsulation: enclosing or hiding details
    public: can be accessed in the same assembly or another assembly that reference it
    private: can ONLY be accessed from within the same class or struct
    protected: can ONLY be accessed from within the same class or struct, or the derived class
    internal: can only be accessed from within the same assembly
    protected internal: protected OR internal

  A class or struct member without access modifier will be PRIVATE by default
  A class or struct or interface without access modifier will be INTERNAL by default
  A interface member is ALWYAS public
  A delegate (when declared directly within a namespace) access modifier will be INTERNAL by default
  A delegate (when nested) access modifier will be PRIVATE by default

  Derived classes cannot have greater accessinility than their base type

Statics
  Use static members of a class without creating an instance of the class

Statistics
  Reduce complexity of app by adding classes
  Constructor Code snippet: ctor + Tab X 2

Computation
  Console WriteLine Code snippet: cw + Tab X 2

Summary

{Module four: Classes and Objects}
Assemblies
  Assemblies
    - created by compiler
    - contains comipled code that can be executed under the Common Language Runtime
    - .exe or (dynamic-link library) .dll files
    - contain metadata about all types inside

  Global Assembly Cache
    - a central location to store assemblies for a machine
    - contain many core libraries like MSCorLib.dll

Browsing Assemblies
  Assembly name is the same as project name by default
  Output type:
    console application (exe)
    class library (dll)  - cannot be started directly
  Assembly will only be loaded when it is used in program, not referenced
  MsCorLib is not listed under References in Solution Explorer - the usage is implied
  Object Browser: see what classes are available to use

Referencing Assemblies
  - must load assembly into memory before using types inside
  - easy approach - reference the assembly in VS

Unit Testing
  - code to test code
  - (By default) assembly name will be the project name
  - Test Calss needs to be public
  - AVOID to make assertion on floating point numbers:
    There can always be minor imprecision
    Double percision vs. Single percision:
      make sure the acutual and expected value are of same type
  - Use the option to specify delta when comparing floating value
    Assert.AreEqual(85.16, ActualResult, 0.01);
    The delta (3rd argument) control the expected amount of precision

{Module five: Types}
Introduction: every type is either a Reference Type or a Value Type

Reference Types
  - created from class defination
  - variables store a reference to an object
  - variable holds address in memory for runtime to find object in memory
  - multiple variables (references) can point to an object
  - string is reference type!

  public class member typically starts with upper case letter
  private class member typically starts with lower case letter
  ** Use unit test as a way to learn about new API / technology **
  ** Test Method code snippet: testm **

Value Types
  - variable that hold the value of itself - No pointer, No reference
  - value stored inside the memory location of a variable
  - Fast (to allocate) and Small (to store)
  - many built-in primitives are value types: like int double, float
  - typically immutable

struct and enum (two ways to create value type)
  struct definations create value type
  example:
    public struct DateTime
    {
      // ...
    }
  purpose of struct: abstraction that represents a single value (small amount of data)
  example:
    "DateTime" represnts a point in DateTime
    Complex numbers
    A point in 2D or 3rd
    Currency amount (value + currency symbol)

  enumerations (enum)
  An enum create value type (named constant)
  Avoid "magic number"
  example:
    public enum PayrollType {
      Contractor = 1,
      Salarid,
      Executive,
      HHourly
    }
  // first symbol is assigned as 1, the subsequent symbols will be 2, 3, ...etc
  enum contains symbols, like Contractor, Salarid, ... listed above
  By default, the first entry in enum will carry index 0

  How to tell reference type from value type:
    reference type: defination contains class
      string is a reference type
    value type: defination contains struct
      bool is a value type

Passing Parameters
  - (Default) Parameters pass "by value"
    - what is passed is always a copy
      Reference type pass a copy of reference
        changes inside a method will impact referenced object
      Value type pass a copy for value
        changes inside a method will NOT impact passed value outside of method

ref and out
  - Alter the default "pass by value" method parameters
  ref: initialize outside of method - pass by reference
  out: initialize inside of method - return as output

immutability
  value type is typically immutable
  such as string or DateTime
  methods like Trim (for string) or AddDays (for DateTime) returns a new copy of the value type
  The calling instance (underlying value) will NOT be changed

Arrays (reference type)
  - fixed size
  - 0 indexed

{Module six: Methods, Fields, Events, and Properties}
Methods
  Methods define behavior
  Every method has return type - void if no value returned
  Every method has 0 to many parameters
    Use keyword "params" to accept a variable number of parameters
  Every method has signature
    signature = mathod name + paramters
    method overloading = same method name; DIFFERENT parameters

  string format:
     example:
      Console.WriteLine("{0:F2}", result);
      {0:F2}
        format as floating point number with 2 digits after decimal point
      {0:C}
        format as currency (like $12.34)

  string interpolation: $ in front of opening quote for formatting string
  example:
    Console.WriteLine($"{result:F2}", result);

Fields and Properties
  Fields: variables of a class
  Typically private for protection
    example: private readonly string _name;

  Property: define get and/or set accessor
    example:
      private string _name;

      public string name
      {
        get { return _name; }
        set {
          // check if input is not null or empty
          if(!String.IsNullOrempty(value))
          {
            _name = value;
            // value is the parameter to the set accessor
          }
        }
      }

Events (high level overview)
  - A type of member in a class
  - Interact with or keep track of components at non-specific time
  - Allow class to send notifications to other classes or objects
    - Publisher raises the event
    - One or more subscribers process the event
    - Publisher does not track subscribers
    - Subscriber does not track other subscribers
  -Events are implemented via delegates

Delegates
  - delegate is a type that declares a variable that references a method
  example:
    public delegate void Writer(string message);  // similar to a method signature
    - this creates a delegate named "Writer"
    - this is NOT a method definition
    - this delegate can hold methods with same parameter(s) types / number and return type; method's name does not matter
  Multi-cast delegate: one delegate can hold multiple methods
  += to add additional delegate
  -= to remove additional delegate
    - useful in UI component management

  Event provides more encapsulation than delegate

Events Revisited
  - based on and use delegate
  independent code can subscribe or un-subscribe to a code without outside interference

Summary


Control Flow

Introduction

Branching

Switching

Iterating

Jumping

Throwing

Handling

Chaining

Finally

Summary

Object Oriented Programming

Introduction

The Pillars

Inheritance

Polymorphism

Abstract Classes

Interfaces

Common Interfaces

Wheto Go Next

summary
