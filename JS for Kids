Part I: Fundamentals
Chapter 1: What Is JavaScript?
    The Structure of a JavaScript Program
        In browser console: Add new lines by pressing shift-enter at the end of each line
    Syntax: rules to combine symbol and words to create programs
    Comments: 
        - Start with two forward lashes (//)
        - in between /* and */
    
Chapter 2: Data Types and Variables
    Data: info stored in program
    Basic data types: numbers, strings and booleans
    ";" marks end of statement
    Variable:
        variable: hold information, new assignment replace the old information  
        Create variable (with keyword var) or initialize variable does not return a value 
            => JS interpreter prints "undefined"
        Assign value to an existing variable and interpreter returns the value assigned and prints it
        Expression can be made from variable and interpreter returns the value of evaluation 
        Ex. 
            var x = 8, y = 2;
            x/y; // => 4
        Naming Variable - camel case:
            - numberOfCandies (Capitalize 1st character)
            - NumberOfCandies (Lower case 1st character)
        Creating New Variables Using Math:
            Ex. Seconds in an hour
                var secondsInAMinute = 60;
                var minutesInAnHour = 60;
                var secondsinAnHour = secondsInAMinute * minutesInAnHour;
                secondsinAnHour; // => 3600  
        Incrementing and Decrementing with ++ or -- operator 
            Increment = increase by 1
            Decrement = decrease by 1
            Pre-Increment / Pre-Decrement (++i or --i) return the value AFTER increment / decrement
            Post-Increment / Post-Decrement (i++ or i--) return the value BEFORE increment / decrement
            Ex.
                var x = 0, y = 0;
                console.log(x++); // => 1
                console.log(++y); // => 0
        += (plus-equals) and –= (minus-equals)    
        Ex. 
            X += 3; // x = x + 3;
            y -= 4; // y = y - 4;
            x *= 3; // x = x * 3;
            y /= 2; // y = y / 2;
    String:
        String = sequence of characters - letters, numbers, spaces and punctuations
        Strings are between quotes so JS knows where it begins and ends 
        Ex. sum vs. string concatenation
            var numberNine = 9;
            var stringNine = "9";
            console.log(numberNine + numberNine); // 18
            console.log(stringNine + stringNine); // "99"
        Finding the Length of a String:
            Ex. 
                var java = "Java";
                var script = "Script";
                var javaScript = java + script;
                javaScript.length; // 10
            length property is available for a string literal or a string variable 
        Getting a Single Character from a String
            JavaScript is zero-index: start from zero
            Ex.
                var javaScript = "JavaScript";
                javaScript[0]; // "J"
        Cutting Up Strings
            slice w/ 2 parameters - 
            1st argument = begining of sliced token
            2nd argument = one character after end of sliced token
                Ex.
                    "01234".slice(1, 4); // "123"
        Changing Strings to All Capital or All Lowercase Letters
            str.toUpperCase() capitalize all characters in a string
            str.toLowerCase() makes all characters in a string lowercase
            Ex.
                var token = "hELlo THERE, hOW ARE yOu doINg?";
                console.log(token[0].toUpperCase() + token.splice(1).toLowerCase());
                // "Hello there, how are you doing?"
    Booleans:
        a boolean value is either true or false
        Logical Operators:
            && (and)
            || (or)
            ! (not)
        Combining logical operators:
            () before && before || in logical statements 
        Comparing Numbers with Booleans:
            > (Greater Than) return true if 1st (left) operand is greater than 2nd (right) operand 
            < (Less Than) return true if 1st (left) operand is less than 2nd (right) operand  
            === (Equal To, triple equal sign)
            == (Double Equals) type coercion - convert two operands into same type than compare (like convert boolean into number than compare)
                Ex. 
                    5 == "5";   // true
                    0 == false; // true
                    1 == true;  // true
            Try It Out!
                age >= 13 || accompanied
    undefined and null:
        variable is assigned value of undefined by default 
        useage of null:
            set a variable to “nothing”, a placeholder 
            dereference objects for garbage collection
            use delete to remove property of an object
    
Chapter 3: Arrays
    Array = a list of other JavaScript data values
    Why Should You Care About Arrays?
        - grouping data for easy access
    Creating an Array
        empty array: [];
        filled array:
            var list = [
                "token01",
                "token02",
                "token03"
            ];  
        Shift + Enter to input multiline on browser console
    Accessing an Array’s Elements with square bracket and index
        Ex. list[0]; // "token01"
    Setting or Changing Elements in an Array
        Ex. 
            var list = [
                "token01",
                "token02",
                "token03"
            ];
            list[6] = "token07";
            list; // ["token01", "token02", "token03", empty X 3, "token07"]
    Mixing Data Types in an Array
        Array elements don't all have to be the same type
        Multi-dimensional array 
        Ex. 
            var list = [
                "token01",
                [1, 2, 3],
                "token03"
            ];
            list[1][2]; // 3
    Working with Arrays
        Finding the Length of an Array: with length property
        Ex.
            var list = [
                "token01",
                [1, 2, 3],
                "token03"
            ];
            list.length; // 3
        Access last element 
        Ex.
            list[list.length - 1];
        Adding Elements to an Array
            Add element to end of array with .push
                Ex. list.push("token04"); // return length of changed array 
            Add element ot begining of array with .unshift
                Ex. list.unshift("token00");    // return length of changed array 
        Removing Elements from an Array
            Remove first element with .shift
                Ex. list.shift(); // return original first element 
            Remove last element with .pop
                Ex. list.pop(); // return original last element 
        Adding Arrays
            Add two arrays together to make new, single array with .concat
                Ex. listOne.concat(listTwo);    // return new single array
                Original arrays are not chnaged 
            Join multiple arrays with .concat
                var totalList = listOne.concat(listTwo, listThree); 
        Finding the Index of an Element in an Array with .indexOf(element)
            if one matching element is present in array   
                return index of element
            if NO matching element is present in array
                return -1
            if more than one matching elements are present in array
                return index of first matching element 
        Turning an Array into a String          
            Join all elements in array together into one string (separated by commas) with .join()
            Ex.
                var list = [
                    "token01",
                    "token02",
                    "token03"
                ];
                list.join();    // return "token01,token02,token03"
            Join elements with different separator with .join(separator)
            Ex.
                list.join(" - ");   // return "token01 - token02 - token03"
            If elements in array is not string, they will be converted into strings before concatination 
    Useful Things to Do with Arrays
        Finding Your Way Home
            Adding from end of list with .push()
        Going in Reverse with pop
            Removing from the end of list with .pop()
            .push() / .pop() like stack
        Decision Maker
            Using Math.random() 
                Get a dandom number between o and 1, but never 1 
            Rounding Down with Math.floor()
                Round down to the next smaller whole number
                Ex. 
                    Math.floor(-0.79); // return -1
                    Math.floor(Math.random() * 4); // return 0, 1, 2, 3, but never 4
        The Complete Decision Maker
            Ex.
                var list = [
                    "token01",
                    "token02",
                    "token03"
                ];
                var randomToken = list[Math.floor(Math.random() * list.length)];                
                console.log(randomToken);
    What You Learned
        Array use number indexes to store elements
        Object use string keys 
    Programming Challenges
        #1 - 4
            var adjList = [
                "Good",
                "Clean",
                "Fun"
            ];
            var materialList = [
                "Wooden",
                "Metal",
                "Paper"
            ];
            var toolList = [
                "Knife",
                "Saw",
                "Scissor"
            ];
            var randomTool = 
                adjList[Math.floor(Math.random() * adjList.length)] + " " 
                + materialList[Math.floor(Math.random() * materialList.length)] + " " 
                + toolList[Math.floor(Math.random() * toolList.length)];
            var randomToolSequence = [
                adjList[Math.floor(Math.random() * adjList.length)],
                materialList[Math.floor(Math.random() * materialList.length)],
                toolList[Math.floor(Math.random() * toolList.length)]
            ];
            var randomToolByJoin = randomToolSequence,join(" ");

Chapter 4: Objects 
    Objects access elements via strings called keys or property 
    Creating Objects 
        Ex. 
        var car = {
            "manufacturer": "Nissan",
            "year": 2014,
            "color": "titanium"
        };
        Object literal = curly bracket and everything enclosed  
        literal = whole value is written out at once, not built up in multiple steps
        Key-value pair
            Ex.
                {"key1": 99}

        Keys Without Quotes - same rule as variable name 
            spaces are allowed for keys in quote
            Ex. 
            var car = {
                manufacturer: "Nissan",
                "year sold": 2014,
                color: "titanium"
            };
        value of key-value pair can be any value type, even a variable

    Accessing Values in Objects 
        Via square bracket 
            Ex. car["color"];   // "titanium"
        Via dot notation - for keys without space
            Ex. car.color;
        Object.keys(car); 
        // returns an array containing all keys
        // ["manufacturer", "year sold", "color"];

    Adding Values to Objects 
        Empty object: vat obj = {};
        Add data to object:
            obj["token"] = "item"; 
        Key-value pairs are NOT stored in any particular order - do not code logic to depend on their sequence

    Adding Keys with Dot Notation
        Ex. 
            var car = {};
            car.color = "titanium"
        Try to access key that does not exist in object will return undefined
            car.door; // undefined

    Combining Arrays and Objects 
        Ex.
            var cars = [
                { "manufacturer": "Nissan", "year": 2014, "color": "titanium"},
                { "manufacturer": "Nissan", "year": 2013, "color": "silver"}
            ];
            cars[0]; // return first element
            cars[1]["year"];    // 2013
            cars[1].color;      // silver

    An Array of Friends 
    
    Exploring Objects in the Console 

    Useful Things to Do with Objects 
        Keeping Track of Owed Money 
    Storing Information About Your Movies 
    What You Learned 
        Programming Challenges
            var myCrazyObject = {
            "name": "A ridiculous object",
            "some array": [7, 9, { purpose: "confusion", number: 123 }, 3.3],
            "random animal": "Banana Shark"
            };
            myCrazyObject["some array"][2].number; // 123
Chapter 5: The Basics of HTML 
    Text Editors
    Our First HTML Document
        <h1>Hello world!</h1>
        <p>My first web page.</p>

    Tags and Elements
        HTML document is made of elements
        element starts with a start tag and ends with an end tag, like h1 and p
        tag is made of element name enclosed by angle brackets <>
        End tag have a forward slash (/) before the element name

    Heading Elements
        h1 is the top-level heading out of six level of headings (h1 to h6)
        
    The p Element defines separate paragraphs of text 

    Whitespace in HTML and Block-Level Elements
        Any whitespace in HTML is collapsed into a single space 
        p and h1 are block-level element
        block-level element:
            display content in a saparate block
            starting on a new line 
            push following content on a new line 

    Inline Elements: do NOT put content onto a new line 
        <em> makes content italic 
        <strong> makes content bold
        un-matched nested tags cause page to break in strange Way

    A Full HTML Document
        <!DOCTYPE html>
        <html>
        <head>
            <title>My first proper HTML page</title>
        </head>
        <body>
            <h1>Hello world!</h1>
            <p>My <em>first</em> <strong>web page</strong>.</p>
            <p>Let's add another <strong><em>paragraph</em></strong>.</p>
        </body>
        </html>

        <!DOCTYPE html> is a declaration for HTML document
        <html> the outermost element for ALL HTML document
        <head> contains document's <title> element
        <body> contains content to be displayed 

    HTML Hierarchy
        <html>
            <head>
                <title>
            <body>
                <h1>
                <p>
    Adding Links to Your HTML
        Link Attributes
            <p><a href="http://xkcd.com">Click here</a> to read some excellent comics.</p>
        Title Attributes for link
            On mouse hover over link: Display value of title attribute 
                <a href="http://xkcd.com" title="xkcd: Land of geeky comics!">Click here</a>
    What You Learned

Chapter 6: Conditionals and Loops
    Conditionals and loops = contorl structures 
    Embedding JavaScript in HTML 

    Conditionals
    if Statements
    if…else Statements
    Chaining if…else Statements
    Loops
    while Loops
    for Loops
    What You Learned
    Programming Challenges with map, reduce and filter
    #1: Awesome Animals 
        var animals = ["Cat", "Fish", "Lemur", "Komodo Dragon"];
        var awsomeAnimals = animals.map(function(animal){
            return "Awsome " + animal; 
        });
        awsomeAnimals; // ["Awesome Cat", "Awesome Fish", "Awesome Lemur", "Awesome Komodo Dragon"]
    #2: Random String Generator 
        var alphabet = "abcdefghijklmnopqrstuvwxyz";
        var randomString = "";
        while (randomString.length < 6) {
            randomString += alphabet[Math.floor(Math.random() * alphabet.length)];
        }
        console.log(randomString);
    #3: h4ck3r sp34k - with map
            var input = "javascript is awesome";
            var output;
            output = input.split('').map((letter) => {
                switch(letter){
                    case "a":
                        return "4";
                        break;
                    case "e":
                        return "3";
                        break;
                    case "i":
                        return "1";
                        break;
                    case "o":
                        return "0";
                        break;
                    default:
                        return letter;
                        break;
                }
            }).join('');
            console.log(output);
        h4ck3r sp34k - with reduce
        var input = "javascript is awesome";
        var output = input.split('').reduce((previous, current) => {
            switch(current){
                    case "a":
                        return previous +"4";
                        break;
                    case "e":
                        return previous +"3";
                        break;
                    case "i":
                        return previous +"1";
                        break;
                    case "o":
                        return previous +"0";
                        break;
                    default:
                        return previous + current;
                        break;
                }
        }, "");
        console.log(output);

Chapter 7: Creating a Hangman Game 
    Interacting with a Player
    
    Creating a Prompt: a pop-up window for user input
    Using confirm to Ask a Yes or No Question
    Using Alerts to Give a Player Information
    Why Use alert Instead of console.log?

    Designing Your Game
        To Do:
            1. pick a random word
            2. Take player's guess
            3. Quit the game if player wants to
            4. Check that the player’s guess is a valid letter
            5. Keep track of letters the player has guessed
            6. Show the player their progress
            7. Finish when the player has guessed the word
         
    Using Pseudocode to Design the Game
        Pick a random word
        While word is not guessed {
            Display current player progress
            Get a guess from player
            if plays wants to quit {
                quit the game
            } 
            else if the guess is not a single character {
                prompt player to pick a single character 
            }
            else {
                if guessed character is part of the word {
                    update game progress
                }
            }
        } 
        Prompt player on guessing the word

    Tracking the State of the Word 
        by array of blanks for each letter in the word
        each blank can be represented by the string "_"

    Designing the Game Loop 
        A simple game loop
            1. Take user input
            2. Update game state
            3. Display current state of game

    Coding the Game 
        Choosing a Random Word
            Ex. 
                var words = [
                    "Encapsulation",
                    "Abstraction", 
                    "Inheritance",
                    "Polymorphism"
                ];
                var word = words[Math.floor(Math.random() * words.length)];    
    
    Creating the Answer Array
        var answerArray = [];
        for (var i = 0; i < word.length; ++i) {
            answerArray[i] = "_";
        }
        var remainingLetters = word.length; // decremented for every correct letter guessed

    Coding the Game Loop 
        while (remainingLetters > 0) {
            // show player progress
            alert(answerArray.join(" "));
            // take player input
            var guess = prompt("Guess a letter or click Cancel to stop playing.");
            if (guess === null) {
                break;  // user click Cnacel, prompt return null, exit loop
            } else if (guess.length !== 1) {
                alert("Please enter a single letter.");
            } else {
                // update the game with guess
                for (var j = 0; j < word.length; ++j) {
                    if (word[j] === guess) {
                        // update answerArray and remainingLetters for every correct guess
                        answerArray[j] = guess;
                        remainingLetters--;
                    }
                }
            }
        }
        // Ending the game
        alert(answerArray.join(" "));
        alert("Good job! The answer was " + word);
        
    The Game Code - done 
    What You Learned
    Programming Challenges
    #1: More Words 
    #2: Capital Letters
    #3: Limiting Guesses
    #4: Fixing a Bug 
Chapter 8: Functions 
Part II: Advanced JavaScript
Chapter 9: The DOM and jQuery 
Chapter 10: Interactive Programming 
Chapter 11: Find the Buried Treasure! 
Chapter 12: Object-Oriented Programming 
Part III: Canvas
Chapter 13: The canvas Element 
Chapter 14: Making Things Move on the Canvas 
Chapter 15: Controlling Animations with the Keyboard 
Chapter 16: Making a Snake Game: Part 1 
Chapter 17: Making a Snake Game: Part 2 
Afterword: Where to Go from Here 