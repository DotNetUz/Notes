{Module one: Overview}
Agenda
  The new security stack for mordern applications
  JSON Web Tokens
  OAuth2:
    Strength & Challenges
    OAuth Flows
  OpenID Connect:
    Authentication protocal build on top of OAuth2
    Both OAuth2 and OpenId deals with security token

  Appendixes
    OAuth2 Security Discussion
    Resources

{Module two: The Security Stack for Modern Applications}
Overview: what is the new security stack?

Enterprise Security:
  Within Active Directory:
    Client, Machine, User, Servers and Security Infrastructure
    Join machine to domain with Kerberos (authentication / authorization)
    LDAP: Keep user directory together
    Assign people to roles
    Query info about the user
    No trust issue - everything within a trusted subsystem
    All machine / clients provisioned by the enterprise
    User with enterprise account

  Busines-to-Business Federation scenarios:
    Need new protocal connect to outside resources
      SOAP
        WS*: WS security, WS trust, WS federation
      XML
        SAML protocal or SAML token types
    Busines-to-Business: both ends are tightly controlled

The Mobile Revolution
  Not enterprise-oriented at the begining:
    No SOAP, No SAML, No WS*
  HTTP / JSON

Mobile Enterprise Apps
  Access enterprise data with mobile device
  Access enterprise data ON / OFF premises

OAuth2 for Authorization
OAuth: Authorization / Delegated authorization
1. Client send request to Authorization Server for token for backend consumption
2. Client forward token to backend services (WEB API)

OpenID Connect for Authentication
1. Client send request to Authentication Server for token for backend consumption
2. Token allow client to validate identity

Summary
  - classic security is intranet-only
  - B2B federationusing protocols like WS-Federation, SAML2p and WS-trust
  - Mobile devices as game changer
  - New Common denominator technologies
    presentation (HTML5, JS, CSS)
    authentication & authorization

{Module three: JSON Web Tokens (JWT)}
Overview
  JWT close to standardization (IETF: Internet Engineering Task Force)
  OpenID connect mandates the use of JWT for all exchange
  OAuth2 implementation mostly with JWT

The Purpose of Security Tokens
  Security tokens are (protected) data structure
    - contain infomration about issuer, recipient and subject (claims)
    - signed (temper proof & authenticity) - can be async
    - typically contain an expiration time
  Client requests token
  Issuer issues token
  Resource (like API, has trust relationship with issuer) consumes token

History
  SAML 1.1 / 2.0
    - XML based
    - many encryption & signature options
    - very expressive
  Simple Web Token
    - Form / URL encoded
    - symmetric signatures only
    - too few features
  JSON Web Token (JWT)
    - JSON encoded
    - symmetric and asymmetric signature (HMACSHA256-384, ECDSA, RSA)
    - symmetric and asymmetric encryption (RSA, AES/CGM)
    - the new standard

JWT Structure and Format
  1. Header
    - metadata
    - algorithm & keys used: for cryptographic operations
  2. Claims
    Reserved claims:
      - Issuer (iss): where is the token coming from
      - Audience (aud): recipient knows the token is for him
      - IssuedAt (iat): when the token is issued
      - Expiration (exp): when the token has expired
      - Subject (sub): identifier that the token describes, like UserID
    Application defined claims:
      - Others

  Example:
    Header
      {
        "typ": "JWT",
        "alg": "HS256"
      }
    Claims:
    exp: epoch time: # of seconds since 01/01/1970
    client: App that request token
      {
        "iss": "http://myIssuer",
        "exp": "1340819380",
        "aud": "http://myResource",
        "sub": "alice",
        "client": "xyz",
        "scope": ["read", "search"]
      }
  token: {Header}.{Claims}.{Signature}
  Take header part Base64 URL encoded, then take claims part Base64 URL encoded

Producing and Consuming JWTs
  Produce a token
    (Nuget) Microsoft.IdentityModel.Tokens.JWT
    Example:
      var token = new JWTSecurityToken (
        issuer: "http://myIssuer",
        audience: "http://myResource",
        claims: GetClaims(),
        signingCredentials: GetKey(),
        validFrom: DataTime.UtcNow,
        validTo: DateTime.UtcNow.AddHours(1)
      );

      // serialize
      var tokenString = new JWTSecurityTokenHandler().WriteToken(token);
      // token string can be on the header of HTTP request or query string or cookies

  Consume a token
    Retrive serialized token: from HTTP header, query string etc
    Validate token and turn into claims
    Example:
      var token = new JWTSecurityToken(tokenString);
      var validationParams = new TokenValidationParameters
      {
        ValidIssuer = "http://myIssuer",
        AllowedAudience = "http://myResource",
        SigningToken = GetSigningKey()
      };
      var handler = new JWTSecurityTokenHandler();
      var principal = handler.ValidateToken(token, validationParams);

Summary
  JWT is easy to
    create
    transmit
    parse
    validate
  Quickly become standard
  Mandatory in OpenIDConnect

{Module four: Introduction to OAuth2}
History
  OAuth2:
    an open protocol to allow secure authorization in
    a simple and standard method from web, mobile and desktop app
  It's about authorization
  OAuth1 could not rely on any sort of transportation protection like SSL
  OAuth1 become too complicated
  October 2012: OAuth2 RFC 6749 and RFC 6750 for Bearer Token usage

OAuth2 Overview
  Human want to use some app to access data
  Client vs. Resource Owner

  A trusted user (resource owner) may run application to access backend coming from a 3rd party
  OAuth takes the software used by resource owner into account
  OAuth also takes the software used by clients (or their platforms) into account -
  these can varying trust level

  Client = the software that is used to access the backend data
  Resource Owner = the human that owns the backend data

The Valet Parking Analogy
  Master key that provides full control of resources
  Valet Parking key that grants limited resources
  How can resource owner gives the client access to resources without giving client the master key?

The Players of OAuth2
  1. Client: many types
    - trusted client: build by the same party who also build resource server and authorization server (like enterprise software)
    - partially trusted client: Build by 3rd party (less trust worthy)
    - public client: software runs on client (mobile) device
    - confidential client: (typically) implemented as server side software with more control over security
    - client is registered with Authorization Server using OAuth flow
    - client access resource with keys
    - not always trusted

  2. Authorization Server: issues limited keys ("valet-parking keys")
    - authorizes client
    - knows about the resource to protect

  3. Resource Owner: Human that "owns" a resource on a resource server
    - use a client to access resources with access key / token
    - but a limited key is preferred

  4. Resource Server: trust Authorization Server
    - inside trust zone
    - knows how to validate different keys (access token)

OAuth2 Flows - with user interaction:
  - describe how a client together with the resource owner can acquire access tokens from
  the authorization server
  - A human involved at some point to allow access for the client to the resource

  Authorization Code Flow:
    - Web Application clients
      1. Request authorization
      2. Request token
      3. Access resource

  Implicit Flow:
    - Native / local clients / user agent based scenarios
      1. Request authorization & token
      2. Access resource

OAuth2 Flows - with NO user interaction (No human consent):
  Resource Owner Password Credential Flow
    "Trusted clients"
      1. Request token with resource owner credentials (master key)
      2. Access resource

  Client Credential Flow
    Client to Service communication (does NOT involve resource owner)
      1. Request token with client credentials
      2. Access resource

Summary
  OAuth is about delegate authorization:
    Authorize a client (software) to access resource on your behalf
      - HTTP / JSON friendly
      Resource owner + client = access token
    Takes multiple client architectures into account
      - clients with different trust level

{Module five: OAuth2 Flows}
Overview
  Authorization Code Flow
  Implicit Flow
  Resource Owner Password Credential Flow
  Client Credential Flow

Code Flow: Authorization Request
  Resource Owner wants to retrive resource via Client;
  Web App (server rendered client) needs access token
  to access Resource Server without needing password from
  Resource Owner

  1. Authorization Request
    Client acces resource
    Client got re-direct to Authorization Server
    ... with following Query string:
    GET /authorize?Client_id=webapp&
    scope=resource&
    redirect_uri=https://webapp/cb&
    response_type=code&
    state=123

    Client_id: name of client, needs to be registered at authorized server first

    scope: requested resource (just "resource" here)

    redirect_uri: URL to redirect to once request is complete

    response_type: authorization coe (just "code" here)

    state is a random number generated by client to ensure that the (call back)
    re-direct URL is valid - this is a cross site request prevention

  1(b). Authentication (by resource owner)
    like google authentication with email and password

  1(c). Consent
    client request permission to access different data (name, URL, photo, etc...)
    from resource owner
    Authentication & Consent are sometimes combined into single step (Twitter)

  1(d). Authorization Response
    - redirect to callback uri (redirect_uri=https://webapp/cb in previous example)
    - presenting app with authorization code (not actual access token, prevent leak)
    - presenting app with state parameter (prevent cross site request)

Code Flow: Token Request
  Direct communication b/t client and authorization server
  Client has to authenticate with authorization server
  example:
    POST /token
      Authorization: Basic (client_id:secret)

    grant_type=authorization_code&
    authorization_code=xyz&
    redirect_uri=https://webapp/cb

  Upon successful authentication, server send back token response
  example:
    {
      "access_token": "abc",
      "expires_in": "3600",
      "token_type": "Bearer",
      "refresh_token": "xyz"
    }
  "refresh_token" is optional

Code Flow: Access and Refresh Token
  Access token is generally short lived
  Instead repeat process to get new access token, refresh token can be use to request a new access token

  Access Token
    typically contains claims like:
      expiration day
      signature
      issuer name
      resource owner identifier
      client identifier
      scope (functions user allows)
        read access
        write access
        Others
      ...anything else needed

  4. Refresh the token
    Client post refresh token to authorization server and get a new access token
    example:
      POST /token
        Authorization: Basic (client_id: secret)

      grant_type=refresh_token&
      refresh_token=xyz

Code Flow: Client Management
  Remove refresh token to turn off access to resources

Code Flow: Summary
  Designed for server-based app
    Client with username and password for authetication on authorization server
  Accountability is provided
    Access token NOT leaked to client or user agent
  Long-lived access can be implemented

Code Flow: Demo

Implicit Flow (Native / Local Clients)
  App run on local device wants to access resource on behalf of resource owner
  but without master key / password

  1(a). Authorization Request
    Client shows page (login UI) for authorization Server
    example:
      GET /authorized?
      client_id=nativeapp&
      scope=resource&
      redirect_uri=http://localhost/cb&
      response_type=token&
      state=123
    Get back token directly

  1(b). Token Response
    Upon successfuly authentication, access token comes back directly inside the callback GET request
    example:
    GET /cb#
      access_token=abc&
      expires_in=3600&
      state=123

    Instead of ? after cb, there is #
    #: callback hash - hash fragment encoded:
    URL or parameters URL will never be sent to a server

    Everything after # is meant for local consumption and won't be sent to a server by browser or web view

  2. Resouce Access
    Client uses access token to request resource
    By placeing it on authorization header of outgoing request
    example:
    GET /resource
      Authorization:
        Barer access_token

    No refresh token by Spec /
      Some uses hidden web view (iFrame); some broke spec by adding refresh token or cookies
      Single sign on experience that requires re-authentication after certain time

Implicit Flow: Demo

Resource Owner Credentials Flow (Trusted Application / local Devices)
  Client application request access to resource
  Client application collects credentials
  Password typed into client application

  1(a). Token Request (talks to token end point directly)
  POST /token
    Authorization: basic (client_id:secret)

  grant_type=password&
  scope=resource&
  user_name=owner&
  password=password&

  1(b). Token Response
  example:
  {
    "access_token": "abc",
    "expires_in": "360",
    "token_type": "Bearer",
    "refresh_token": "xyz"
  }

  For better security: Keep token / throw away password

  2. Resource Access
    Client request resource and refresh token when access token expired
    example:
    GET /resource
    Authorization:
      Bearer access_token

  Summary: Resource Owner Credentials Flow
    Resource owner credentials are exposed to client - users should not become accustomed to that
    Still better to store access token / refresh token on device than password

Resource Owner Credentials Flow: Demo

Client Credential Flow
  Machine-to-Machine communication without human
  Client goes to the token endpoint of authorization server,
  authenticate itself but no resource owner involved
  Client can never act as user, only itself
  example:
  POST /token
    Authorization: Basic (client_id:secret)
  grant_type=client_credentials&
  scope=resource

Summary
  OAuth2 flows describe various options for
    - request authorization
    - request tokens

  A separate spec (RFC 6750) describes how to transmit bearer access tokens to the resource server
    1. put access token on authorization header of an HTTP request
    2. send it to resource server

{Module six: OpenID Connect}
Overview:
  OpenID Connect sits on top of OAuth2
  OpenID Connect reuses OAuth2 message format to implement Authentication

OAuth2 and Authentication
  OAuth2 is for (delegated) authorization
    - authentication is a pre-requeste
    - access token for back-end service

  Sometimes you just need authentication
    - may not need to access the back-end, at least at the begining
    - identify user in an app

  OAuth2 is regularly "abused" for that

The Problems With OAuth2 Authentication

OpenID Code Flow
  - OpenID Connect builds on top of OAuth2
    - Authorization Code Flow (for sever based app)
    - Implicit Flow (for client based app)
  - Adds some new concepts
    - ID Token (new token type)
    - UserInfo endpoint
  - Some additional protocals
    - discover & dynamic registration
    - session management

OpenID Connect Players
  Identity Provider

  Authorization endpoint

  Token endpoint

  UserInfo endpoint

  User agent: like browser

  Client


Summary

7
OAuth2 Concerns

Overview

Eran Hammer

Specification Bloat

Bearer Tokens

Security Theater

Attack Surface

Summary

8
Resources

Resources
